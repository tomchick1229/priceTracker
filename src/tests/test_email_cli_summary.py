"""Test module for sending CLI summary via email."""

import sys
import subprocess
from pathlib import Path

# Add the project root to the path to allow imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.email_agent import EmailAgent


def get_cli_summary():
    """Get the current CLI scan output."""
    try:
        # Run the CLI scan command
        result = subprocess.run(
            ["uv", "run", "python", "src/cli.py", "scan"],
            cwd=Path(__file__).parent.parent.parent,
            capture_output=True,
            text=True,
            timeout=60
        )
        
        if result.returncode == 0:
            return result.stdout
        else:
            return f"CLI scan failed with error:\n{result.stderr}"
    except subprocess.TimeoutExpired:
        return "CLI scan timed out after 60 seconds"
    except Exception as e:
        return f"Error running CLI scan: {e}"


def test_email_with_cli_summary():
    """Test sending CLI summary back to sender."""
    print("=" * 60)
    print("EMAIL AGENT TEST - CLI SUMMARY TO SENDER")
    print("=" * 60)
    
    # Get CLI summary
    print("Getting CLI summary...")
    cli_output = get_cli_summary()
    print("CLI output captured:")
    print("-" * 40)
    print(cli_output)
    print("-" * 40)
    
    # Test email functionality
    print("\nTesting email agent...")
    try:
        agent = EmailAgent()
        
        # Test connection first
        print("Testing email connection...")
        if not agent.test_connection():
            print("‚ùå Email connection failed!")
            return False
        
        print("‚úÖ Email connection successful!")
        
        # Send CLI summary to sender
        sender_email = "tomchickchick@gmail.com"  # Based on .env file
        
        email_content = f"""
Price Tracker CLI Summary Report
Generated on: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Here is the latest scan output from your price tracker:

{cli_output}

This email was automatically generated by your Price Tracker system to test the email functionality.
        """.strip()
        
        print(f"\nSending CLI summary to {sender_email}...")
        success = agent.send_email(
            recipients=[sender_email],
            content=email_content,
            title="Price Tracker - CLI Summary Report"
        )
        
        if success:
            print("‚úÖ CLI summary email sent successfully!")
            print(f"Check {sender_email} for the email.")
            return True
        else:
            print("‚ùå Failed to send CLI summary email!")
            return False
            
    except Exception as e:
        print(f"‚ùå Error during email test: {e}")
        return False


def diagnose_email_issues():
    """Diagnose common email configuration issues."""
    print("\n" + "=" * 60)
    print("EMAIL CONFIGURATION DIAGNOSIS")
    print("=" * 60)
    
    # Check .env file
    env_path = Path(__file__).parent.parent.parent / ".env"
    if not env_path.exists():
        print("‚ùå No .env file found!")
        print("Create a .env file with your email credentials.")
        return
    
    print("‚úÖ .env file exists")
    
    # Try to load email agent and check credentials
    try:
        from src.email_agent import EmailAgent
        agent = EmailAgent()
        
        print(f"üìß Email username: {agent.username}")
        print(f"üñ•Ô∏è  SMTP server: {agent.smtp_server}")
        print(f"üîå SMTP port: {agent.smtp_port}")
        print(f"üîê Using TLS: {agent.use_tls}")
        
        # Test connection and provide specific error details
        print("\nTesting SMTP connection...")
        try:
            import smtplib
            
            # Create connection
            if agent.use_tls:
                server = smtplib.SMTP(agent.smtp_server, agent.smtp_port)
                server.starttls()
            else:
                server = smtplib.SMTP_SSL(agent.smtp_server, agent.smtp_port)
            
            # Try to login
            server.login(agent.username, agent.password)
            server.quit()
            print("‚úÖ SMTP connection and authentication successful!")
            
        except smtplib.SMTPAuthenticationError as e:
            print("‚ùå SMTP Authentication failed!")
            print(f"Error: {e}")
            print("\nüîß TROUBLESHOOTING TIPS:")
            print("1. For Gmail, you MUST use an 'App Password', not your regular password")
            print("2. Enable 2-factor authentication on your Google account")
            print("3. Go to: Google Account > Security > App passwords")
            print("4. Generate a new app password for 'Mail'")
            print("5. Use that 16-character password in your .env file")
            print("6. Make sure your username is your full email address")
            
        except Exception as e:
            print(f"‚ùå SMTP connection failed: {e}")
            print("\nüîß TROUBLESHOOTING TIPS:")
            print("1. Check your SMTP server and port settings")
            print("2. Verify your internet connection")
            print("3. Check if your email provider requires app passwords")
            
    except Exception as e:
        print(f"‚ùå Error loading email agent: {e}")


def main():
    """Run the email test with CLI summary."""
    success = test_email_with_cli_summary()
    
    if not success:
        diagnose_email_issues()
        
        print("\n" + "=" * 60)
        print("EMAIL TEST FAILED - ISSUE REPORT")
        print("=" * 60)
        print("‚ùå ISSUE: Email authentication failed")
        print("üîç CAUSE: Gmail requires App Password, not regular password")
        print("üîß SOLUTION: Set up Gmail App Password")
        print("")
        print("STEPS TO FIX:")
        print("1. Go to https://myaccount.google.com/security")
        print("2. Enable 2-factor authentication if not already enabled")
        print("3. Go to 'App passwords' section")
        print("4. Generate new app password for 'Mail'")
        print("5. Update .env file with the 16-character app password")
        print("6. Run this test again")
        print("")
        print("The email agent is correctly implemented and will work")
        print("once proper Gmail App Password is configured.")
        print("=" * 60)


if __name__ == "__main__":
    main()
